-module(generate_entities).
-export([main/1]).

-define(JSON_PATH, "priv/entities.json").
-define(DEST_PATH, "src/floki_entities_codepoints.erl").

%% @doc Main entry point for the script.
main(_) ->
    io:format("Generating entities...~n"),

    % Find the project's root directory
    {ok, Cwd} = file:get_cwd(),
    JsonPath = filename:join(Cwd, ?JSON_PATH),
    DestPath = filename:join(Cwd, ?DEST_PATH),

    case generate_module_contents(JsonPath) of
        {ok, ModuleContents} ->
            ok = file:write_file(DestPath, ModuleContents),
            io:format("Success! Entities module generated at ~s~n", [DestPath]),
            erlang:halt(0);
        {error, Reason} ->
            io:format(standard_error, "Error: ~p~n", [Reason]),
            erlang:halt(1)
    end.

%% @private Generates the full Erlang module as a binary.
generate_module_contents(JsonPath) ->
    case file:read_file(JsonPath) of
        {ok, JsonBin} ->
            JsonMap = jsone:decode(JsonBin),
            SortedEntities = lists:sort(maps:to_list(JsonMap)),

            Header = <<
"-module(floki_entities_codepoints).
% This file was generated by the 'generate_entities' script.

-export([get/1]).

-spec get(binary()) -> [integer()] | [].
%% @doc Returns unicode codepoints for a given HTML entity.
">>,
            FunctionClauses = lists:map(fun generate_clause/1, SortedEntities),
            Footer = <<"get(_) -> [].\n">>,

            {ok, iolist_to_binary([Header, FunctionClauses, Footer])};
        {error, Reason} ->
            {error, {'File read failed', JsonPath, Reason}}
    end.

%% @private Generates a single function clause.
generate_clause({Key, #{<<"codepoints">> := Codepoints}}) ->
    io_lib:format("get(~p) -> ~p;~n", [Key, Codepoints]).
